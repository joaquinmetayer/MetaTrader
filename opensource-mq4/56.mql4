#property strict

input int eaMagicNumber = 5656; //Magic number
input double eaLotSize = 0.56; //Lot size
input double eaOrderDistance = 0.56; //Order distance
input int eaMaxCircle = 11; //Orders for reset
input string eaStartTime = "00:11"; // Start time
input string eaEndTime = "00:00"; // End time
input string eaPassword = "56"; //Password

int eaSlippage = 10;
string eaComment = "56-";
int eaBuyCommentInteger = 1;
int eaSellCommentInteger = 1;
int myDigits;
double myPoints;
string currentTime;

int OnInit(){
    Comment("56");
    ChartSetInteger (NULL, CHART_COLOR_BACKGROUND, clrWhite);
    ChartSetInteger (NULL, CHART_COLOR_CHART_UP, clrBlack);
    ChartSetInteger (NULL, CHART_COLOR_CHART_DOWN, clrBlack);
    ChartSetInteger (NULL, CHART_COLOR_ASK, clrBlack);
    ChartSetInteger (NULL, CHART_COLOR_BID, clrBlack);
    ChartSetInteger (NULL, CHART_COLOR_CHART_LINE, clrBlack);
    ChartSetInteger (NULL, CHART_COLOR_CANDLE_BEAR, clrBlack);
    ChartSetInteger (NULL, CHART_COLOR_CANDLE_BULL, clrWhite);
    ChartSetInteger (NULL, CHART_COLOR_GRID, clrBlack);
    ChartSetInteger (NULL, CHART_COLOR_FOREGROUND, clrBlack);
    ChartSetInteger (NULL, CHART_COLOR_ASK, clrBlack);
    myDigits = Digits();
    myPoints = Point();
    if(myDigits == 3 || myDigits == 5 ){
        myDigits *= 10;
        myPoints *= 10;
    }
    return(INIT_SUCCEEDED);
}
void OnDeinit(const int reason){}
void OnTick(){
    datetime time = TimeLocal();
    currentTime = TimeToString (time, TIME_MINUTES);
    if(currentTime >= eaStartTime && currentTime <= eaEndTime && eaPassword == "56" ){
        eaBuyCommentInteger = 1;
        if(CountOrders(Symbol(), OP_BUY, eaMagicNumber) == 0){
            double orderLots = eaLotSize;
            if(OrderSend(Symbol(), OP_BUY, orderLots, Ask, eaSlippage, 0, 0, eaComment + IntegerToString(eaBuyCommentInteger), eaMagicNumber, 0, clrBlue) > 0){
               eaBuyCommentInteger++;
            }
        }
        else{
            if(Close[0] > CalculateOrderOpenPrice(Symbol(), OP_BUY, eaMagicNumber) + eaOrderDistance * myPoints){
               double orderLots = NormalizeDouble(CalculateOrderLots(Symbol(), OP_BUY, eaMagicNumber) * 1.5, myDigits);
               CloseOrders(Symbol(), OP_BUY, eaMagicNumber, eaSlippage, clrYellow);
               if(eaMaxCircle >= eaBuyCommentInteger){
                  if(OrderSend(Symbol(), OP_BUY, orderLots, Ask, eaSlippage, 0, 0, eaComment + IntegerToString(eaBuyCommentInteger), eaMagicNumber, 0, clrBlue) > 0){
                  eaBuyCommentInteger++;
                }
              }
            }
            if(Close[0] < CalculateOrderOpenPrice(Symbol(), OP_BUY, eaMagicNumber) - 1 * eaOrderDistance * myPoints){
                CloseOrders(Symbol(), OP_BUY, eaMagicNumber, eaSlippage, clrYellow);
                eaBuyCommentInteger = 1;
            }
        }
        if(CountOrders(Symbol(), OP_SELL, eaMagicNumber) == 0){
            eaSellCommentInteger = 1;
            double orderLots = eaLotSize;
            if(OrderSend(Symbol(), OP_SELL, orderLots, Bid, eaSlippage, 0, 0, eaComment + IntegerToString(eaSellCommentInteger), eaMagicNumber, 0, clrRed) > 0){
              eaSellCommentInteger++;
            }
        }
        else{
            if(Close[0] < CalculateOrderOpenPrice(Symbol(), OP_SELL, eaMagicNumber) - eaOrderDistance * myPoints){
              double orderLots = NormalizeDouble(CalculateOrderLots(Symbol(), OP_SELL, eaMagicNumber) * 1.5, myDigits);
              CloseOrders(Symbol(), OP_SELL, eaMagicNumber, eaSlippage, clrYellow);
              if(eaMaxCircle >= eaSellCommentInteger){
                if(OrderSend(Symbol(), OP_SELL, orderLots, Bid, eaSlippage, 0, 0, eaComment + IntegerToString(eaSellCommentInteger), eaMagicNumber, 0, clrRed) > 0){
                eaSellCommentInteger++;
                }
              }
            }
            if(Close[0] > CalculateOrderOpenPrice(Symbol(), OP_SELL, eaMagicNumber) + 1 * eaOrderDistance * myPoints){
               CloseOrders(Symbol(), OP_SELL, eaMagicNumber, eaSlippage, clrYellow);
               eaSellCommentInteger = 1;
            }
        }
    }
}
datetime CalculateOrderOpenTime(string orderSymbol, int orderType, int orderMagicNumber){
    datetime orderOpenTime = 0;
    for(int i = OrdersTotal() - 1; i >= 0; i--){
        if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES)){
            if(OrderSymbol() == orderSymbol && OrderType() == orderType && OrderMagicNumber() == orderMagicNumber){
                orderOpenTime = OrderOpenTime();
            }
        }
    }
    return orderOpenTime;
}
double CalculateOrderOpenPrice(string orderSymbol, int orderType, int orderMagicNumber){
    double orderOpenPrice = 0;
    for(int i = OrdersTotal() - 1; i >= 0; i--){
        if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES)){
            if(OrderSymbol() == orderSymbol && OrderType() == orderType && OrderMagicNumber() == orderMagicNumber){
                orderOpenPrice = OrderOpenPrice();
            }
        }
    }
    return orderOpenPrice;
}
double CalculateOrderStopLoss(string orderSymbol, int orderType, int orderMagicNumber){
    double orderStopLoss = 0;
    for(int i = OrdersTotal() - 1; i >= 0; i--){
        if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES)){
            if(OrderSymbol() == orderSymbol && OrderType() == orderType && OrderMagicNumber() == orderMagicNumber){
                orderStopLoss = OrderStopLoss();
            }
        }
    }
    return orderStopLoss;
}
double CalculateOrderLots(string orderSymbol, int orderType, int orderMagicNumber){
    double orderLots = 0;
    for(int i = OrdersTotal() - 1; i >= 0; i--){
        if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES)){
            if(OrderSymbol() == orderSymbol && OrderType() == orderType && OrderMagicNumber() == orderMagicNumber){
                orderLots = OrderLots();
            }
        }
    }
    return orderLots;
}
int CountOrders(string orderSymbol, int orderType, int orderMagicNumber){
    int orderCount = 0;
    for(int i = OrdersTotal() - 1; i >= 0; i--){
        if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES)){
            if(OrderSymbol() == orderSymbol && OrderType() == orderType && OrderMagicNumber() == orderMagicNumber){
                orderCount++;
            }
        }
    }  
    return orderCount;
} 
void CloseOrders(string orderSymbol, int orderType, int orderMagicNumber, int orderSlippage, color orderColor){
    for(int i = OrdersTotal() - 1; i >= 0; i--){
        if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES)){
            if(OrderSymbol() == orderSymbol && OrderType() == orderType && OrderMagicNumber() == orderMagicNumber){
                if(orderType == OP_BUY){
                    if(!OrderClose(OrderTicket(), OrderLots(), Bid, orderSlippage, orderColor)){
                        Print("Buy Order Close Error N : " + IntegerToString(GetLastError()));
                        continue;
                    }
                }
                else if(orderType == OP_SELL){
                    if(!OrderClose(OrderTicket(), OrderLots(), Ask, orderSlippage, orderColor)){
                        Print("Sell Order Close Error N : " + IntegerToString(GetLastError()));
                        continue;
                    }
                }
            }
        }
    }
}